// Generated by dts-bundle v0.7.3

declare module 'polished' {
  import adjustHue from 'polished/color/adjustHue';
  import animation from 'polished/shorthands/animation';
  import backgroundImages from 'polished/shorthands/backgroundImages';
  import backgrounds from 'polished/shorthands/backgrounds';
  import between from 'polished/mixins/between';
  import border from 'polished/shorthands/border';
  import borderColor from 'polished/shorthands/borderColor';
  import borderRadius from 'polished/shorthands/borderRadius';
  import borderStyle from 'polished/shorthands/borderStyle';
  import borderWidth from 'polished/shorthands/borderWidth';
  import buttons from 'polished/shorthands/buttons';
  import clearFix from 'polished/mixins/clearFix';
  import complement from 'polished/color/complement';
  import cover from 'polished/mixins/cover';
  import darken from 'polished/color/darken';
  import desaturate from 'polished/color/desaturate';
  import directionalProperty from 'polished/helpers/directionalProperty';
  import ellipsis from 'polished/mixins/ellipsis';
  import em from 'polished/helpers/em';
  import fluidRange from 'polished/mixins/fluidRange';
  import fontFace from 'polished/mixins/fontFace';
  import getLuminance from 'polished/color/getLuminance';
  import getValueAndUnit from 'polished/helpers/getValueAndUnit';
  import grayscale from 'polished/color/grayscale';
  import invert from 'polished/color/invert';
  import hideText from 'polished/mixins/hideText';
  import hideVisually from 'polished/mixins/hideVisually';
  import hiDPI from 'polished/mixins/hiDPI';
  import hsl from 'polished/color/hsl';
  import hsla from 'polished/color/hsla';
  import hslToColorString from 'polished/color/hslToColorString';
  import lighten from 'polished/color/lighten';
  import linearGradient from 'polished/mixins/linearGradient';
  import margin from 'polished/shorthands/margin';
  import math from 'polished/math/math';
  import mix from 'polished/color/mix';
  import modularScale from 'polished/helpers/modularScale';
  import normalize from 'polished/mixins/normalize';
  import opacify from 'polished/color/opacify';
  import padding from 'polished/shorthands/padding';
  import parseToHsl from 'polished/color/parseToHsl';
  import parseToRgb from 'polished/color/parseToRgb';
  import position from 'polished/shorthands/position';
  import radialGradient from 'polished/mixins/radialGradient';
  import readableColor from 'polished/color/readableColor';
  import rem from 'polished/helpers/rem';
  import retinaImage from 'polished/mixins/retinaImage';
  import rgb from 'polished/color/rgb';
  import rgba from 'polished/color/rgba';
  import rgbToColorString from 'polished/color/rgbToColorString';
  import saturate from 'polished/color/saturate';
  import setHue from 'polished/color/setHue';
  import setLightness from 'polished/color/setLightness';
  import setSaturation from 'polished/color/setSaturation';
  import shade from 'polished/color/shade';
  import size from 'polished/shorthands/size';
  import stripUnit from 'polished/helpers/stripUnit';
  import textInputs from 'polished/shorthands/textInputs';
  import timingFunctions from 'polished/mixins/timingFunctions';
  import tint from 'polished/color/tint';
  import toColorString from 'polished/color/toColorString';
  import transitions from 'polished/shorthands/transitions';
  import transparentize from 'polished/color/transparentize';
  import triangle from 'polished/mixins/triangle';
  import wordWrap from 'polished/mixins/wordWrap';

  export { adjustHue };
  export { animation };
  export { backgroundImages };
  export { backgrounds };
  export { between };
  export { border };
  export { borderColor };
  export { borderRadius };
  export { borderStyle };
  export { borderWidth };
  export { buttons };
  export { clearFix };
  export { complement };
  export { cover };
  export { darken };
  export { desaturate };
  export { directionalProperty };
  export { ellipsis };
  export { em };
  export { fluidRange };
  export { fontFace };
  export { getLuminance };
  export { getValueAndUnit };
  export { grayscale };
  export { invert };
  export { hideText };
  export { hideVisually };
  export { hiDPI };
  export { hsl };
  export { hsla };
  export { hslToColorString };
  export { lighten };
  export { linearGradient };
  export { margin };
  export { math };
  export { mix };
  export { modularScale };
  export { normalize };
  export { opacify };
  export { padding };
  export { parseToHsl };
  export { parseToRgb };
  export { position };
  export { radialGradient };
  export { readableColor };
  export { rem };
  export { retinaImage };
  export { rgb };
  export { rgba };
  export { rgbToColorString };
  export { saturate };
  export { setHue };
  export { setLightness };
  export { setSaturation };
  export { shade };
  export { size };
  export { stripUnit };
  export { textInputs };
  export { timingFunctions };
  export { tint };
  export { toColorString };
  export { transitions };
  export { transparentize };
  export { triangle };
  export { wordWrap };
}

declare module 'polished/color/adjustHue' {
  function curriedAdjustHueWith1(color: string): string;
  function curriedAdjustHue(
      degree: number | string,
  ): typeof curriedAdjustHueWith1;
  function curriedAdjustHue(
      degree: number | string,
      color: string,
  ): string;

  export default curriedAdjustHue;
}

declare module 'polished/shorthands/animation' {
  import { Styles } from 'polished/types/style';

  function animation(
      ...args: Array<Array<string | number> | string | number>
  ): Styles;

  export default animation;
}

declare module 'polished/shorthands/backgroundImages' {
  import { Styles } from 'polished/types/style';

  function backgroundImages(...properties: Array<string>): Styles;

  export default backgroundImages;
}

declare module 'polished/shorthands/backgrounds' {
  import { Styles } from 'polished/types/style';

  function backgrounds(...properties: Array<string>): Styles;

  export default backgrounds;
}

declare module 'polished/mixins/between' {
  function between(
      fromSize: string,
      toSize: string,
      minScreen?: string,
      maxScreen?: string,
  ): string;

  export default between;
}

declare module 'polished/shorthands/border' {
  import { SideKeyword } from 'polished/types/sideKeyword';
  import { Styles } from 'polished/types/style';

  function border(
      sideKeyword: SideKeyword | string | number,
      ...values: Array<string | number>
  ): Styles;

  export default border;
}

declare module 'polished/shorthands/borderColor' {
  import { Styles } from 'polished/types/style';

  function borderColor(...values: Array<null | void | string>): Styles;

  export default borderColor;
}

declare module 'polished/shorthands/borderRadius' {
  import { Styles } from 'polished/types/style';

  function borderRadius(side: string, radius: string | number): Styles;

  export default borderRadius;
}

declare module 'polished/shorthands/borderStyle' {
  import { Styles } from 'polished/types/style';

  function borderStyle(...values: Array<null | void | string>): Styles;

  export default borderStyle;
}

declare module 'polished/shorthands/borderWidth' {
  import { Styles } from 'polished/types/style';

  function borderWidth(
      ...values: Array<null | void | string | null | void | number>
  ): Styles;

  export default borderWidth;
}

declare module 'polished/shorthands/buttons' {
  import { InteractionState } from 'polished/types/interactionState';

  function buttons(...states: Array<InteractionState>): string;

  export default buttons;
}

declare module 'polished/mixins/clearFix' {
  import { Styles } from 'polished/types/style';

  function clearFix(parent?: string): Styles;

  export default clearFix;
}

declare module 'polished/color/complement' {
  function complement(color: string): string;

  export default complement;
}

declare module 'polished/mixins/cover' {
  import { Styles } from 'polished/types/style';

  function cover(offset?: number | string): Styles;

  export default cover;
}

declare module 'polished/color/darken' {
  function curriedDarkenWith1(color: string): string;
  function curriedDarken(
      amount: number | string,
  ): typeof curriedDarkenWith1;
  function curriedDarken(amount: number | string, color: string): string;

  export default curriedDarken;
}

declare module 'polished/color/desaturate' {
  function curriedDesaturateWith1(color: string): string;
  function curriedDesaturate(
      amount: number | string,
  ): typeof curriedDesaturateWith1;
  function curriedDesaturate(
      amount: number | string,
      color: string,
  ): string;

  export default curriedDesaturate;
}

declare module 'polished/helpers/directionalProperty' {
  import { Styles } from 'polished/types/style';

  function directionalProperty(
      property: string,
      ...values: Array<null | void | string | null | void | number>
  ): Styles;

  export default directionalProperty;
}

declare module 'polished/mixins/ellipsis' {
  import { Styles } from 'polished/types/style';

  function ellipsis(width?: string | number): Styles;

  export default ellipsis;
}

declare module 'polished/helpers/em' {
  const em: (value: string | number, base?: string | number) => string;

  export default em;
}

declare module 'polished/mixins/fluidRange' {
  import { FluidRangeConfiguration } from 'polished/types/fluidRangeConfiguration';
  import { Styles } from 'polished/types/style';

  function fluidRange(
      cssProp: Array<FluidRangeConfiguration> | FluidRangeConfiguration,
      minScreen?: string,
      maxScreen?: string,
  ): Styles;

  export default fluidRange;
}

declare module 'polished/mixins/fontFace' {
  import { FontFaceConfiguration } from 'polished/types/fontFaceConfiguration';
  import { Styles } from 'polished/types/style';

  function fontFace({
      fontFamily,
      fontFilePath,
      fontStretch,
      fontStyle,
      fontVariant,
      fontWeight,
      fileFormats,
      formatHint,
      localFonts,
      unicodeRange,
      fontDisplay,
      fontVariationSettings,
      fontFeatureSettings,
  }: FontFaceConfiguration): Styles;

  export default fontFace;
}

declare module 'polished/color/getLuminance' {
  function getLuminance(color: string): number;

  export default getLuminance;
}

declare module 'polished/helpers/getValueAndUnit' {
  function getValueAndUnit(
      value: string,
  ): [number | string, string | void];

  export default getValueAndUnit;
}

declare module 'polished/color/grayscale' {
  function grayscale(color: string): string;

  export default grayscale;
}

declare module 'polished/color/invert' {
  function invert(color: string): string;

  export default invert;
}

declare module 'polished/mixins/hideText' {
  import { Styles } from 'polished/types/style';

  function hideText(): Styles;

  export default hideText;
}

declare module 'polished/mixins/hideVisually' {
  import { Styles } from 'polished/types/style';

  function hideVisually(): Styles;

  export default hideVisually;
}

declare module 'polished/mixins/hiDPI' {
  function hiDPI(ratio?: number): string;

  export default hiDPI;
}

declare module 'polished/color/hsl' {
  import { HslColor } from 'polished/types/color';

  function hsl(
      value: HslColor | number,
      saturation?: number,
      lightness?: number,
  ): string;

  export default hsl;
}

declare module 'polished/color/hsla' {
  import { HslaColor } from 'polished/types/color';

  function hsla(
      value: HslaColor | number,
      saturation?: number,
      lightness?: number,
      alpha?: number,
  ): string;

  export default hsla;
}

declare module 'polished/color/hslToColorString' {
  import { HslColor } from 'polished/types/color';
  import { HslaColor } from 'polished/types/color';

  function hslToColorString(color: HslColor | HslaColor | number): string;

  export default hslToColorString;
}

declare module 'polished/color/lighten' {
  function curriedLightenWith1(color: string): string;
  function curriedLighten(
      amount: number | string,
  ): typeof curriedLightenWith1;
  function curriedLighten(amount: number | string, color: string): string;

  export default curriedLighten;
}

declare module 'polished/mixins/linearGradient' {
  import { LinearGradientConfiguration } from 'polished/types/linearGradientConfiguration';
  import { Styles } from 'polished/types/style';

  function linearGradient({
      colorStops,
      fallback,
      toDirection,
  }: LinearGradientConfiguration): Styles;

  export default linearGradient;
}

declare module 'polished/shorthands/margin' {
  import { Styles } from 'polished/types/style';

  function margin(
      ...values: Array<null | void | string | null | void | number>
  ): Styles;

  export default margin;
}

declare module 'polished/math/math' {
  function math(formula: string, additionalSymbols?: Object): string;

  export default math;
}

declare module 'polished/color/mix' {
  function curriedMixWith2(otherColor: string): string;
  function curriedMixWith1(color: string): typeof curriedMixWith2;
  function curriedMixWith1(color: string, otherColor: string): string;
  function curriedMix(weight: number | string): typeof curriedMixWith1;
  function curriedMix(
      weight: number | string,
      color: string,
  ): typeof curriedMixWith2;
  function curriedMix(
      weight: number | string,
      color: string,
      otherColor: string,
  ): string;

  export default curriedMix;
}

declare module 'polished/helpers/modularScale' {
  import { ModularScaleRatio } from 'polished/types/modularScaleRatio';

  const ratioNames: {
      minorSecond: 1.067;
      majorSecond: 1.125;
      minorThird: 1.2;
      majorThird: 1.25;
      perfectFourth: 1.333;
      augFourth: 1.414;
      perfectFifth: 1.5;
      minorSixth: 1.6;
      goldenSection: 1.618;
      majorSixth: 1.667;
      minorSeventh: 1.778;
      majorSeventh: 1.875;
      octave: 2;
      majorTenth: 2.5;
      majorEleventh: 2.667;
      majorTwelfth: 3;
      doubleOctave: 4;
  };
  function modularScale(
      steps: number,
      base?: number | string,
      ratio?: ModularScaleRatio,
  ): string;

  export { ratioNames };
  export default modularScale;
}

declare module 'polished/mixins/normalize' {
  import { Styles } from 'polished/types/style';

  function normalize(): Array<Styles>;

  export default normalize;
}

declare module 'polished/color/opacify' {
  function curriedOpacifyWith1(color: string): string;
  function curriedOpacify(
      amount: number | string,
  ): typeof curriedOpacifyWith1;
  function curriedOpacify(amount: number | string, color: string): string;

  export default curriedOpacify;
}

declare module 'polished/shorthands/padding' {
  import { Styles } from 'polished/types/style';

  function padding(
      ...values: Array<null | void | string | null | void | number>
  ): Styles;

  export default padding;
}

declare module 'polished/color/parseToHsl' {
  import { HslColor } from 'polished/types/color';
  import { HslaColor } from 'polished/types/color';

  function parseToHsl(color: string): HslColor | HslaColor;

  export default parseToHsl;
}

declare module 'polished/color/parseToRgb' {
  import { RgbColor } from 'polished/types/color';
  import { RgbaColor } from 'polished/types/color';

  function parseToRgb(color: string): RgbColor | RgbaColor;

  export default parseToRgb;
}

declare module 'polished/shorthands/position' {
  import { Styles } from 'polished/types/style';

  function position(
      positionKeyword: string | null,
      ...values: Array<null | void | string | null | void | number>
  ): Styles;

  export default position;
}

declare module 'polished/mixins/radialGradient' {
  import { RadialGradientConfiguration } from 'polished/types/radialGradientConfiguration';
  import { Styles } from 'polished/types/style';

  function radialGradient({
      colorStops,
      extent,
      fallback,
      position,
      shape,
  }: RadialGradientConfiguration): Styles;

  export default radialGradient;
}

declare module 'polished/color/readableColor' {
  function readableColor(
      color: string,
      lightReturnColor?: string,
      darkReturnColor?: string,
  ): string;

  export default readableColor;
}

declare module 'polished/helpers/rem' {
  const rem: (value: string | number, base?: string | number) => string;

  export default rem;
}

declare module 'polished/mixins/retinaImage' {
  import { Styles } from 'polished/types/style';

  function retinaImage(
      filename: string,
      backgroundSize?: string,
      extension?: string,
      retinaFilename?: string,
      retinaSuffix?: string,
  ): Styles;

  export default retinaImage;
}

declare module 'polished/color/rgb' {
  import { RgbColor } from 'polished/types/color';

  function rgb(
      value: RgbColor | number,
      green?: number,
      blue?: number,
  ): string;

  export default rgb;
}

declare module 'polished/color/rgba' {
  import { RgbaColor } from 'polished/types/color';

  function rgba(
      firstValue: RgbaColor | number | string,
      secondValue?: number,
      thirdValue?: number,
      fourthValue?: number,
  ): string;

  export default rgba;
}

declare module 'polished/color/rgbToColorString' {
  import { RgbColor } from 'polished/types/color';
  import { RgbaColor } from 'polished/types/color';

  function rgbToColorString(color: RgbColor | RgbaColor): string;

  export default rgbToColorString;
}

declare module 'polished/color/saturate' {
  function curriedSaturateWith1(color: string): string;
  function curriedSaturate(
      amount: number | string,
  ): typeof curriedSaturateWith1;
  function curriedSaturate(
      amount: number | string,
      color: string,
  ): string;

  export default curriedSaturate;
}

declare module 'polished/color/setHue' {
  function curriedSetHueWith1(color: string): string;
  function curriedSetHue(hue: number | string): typeof curriedSetHueWith1;
  function curriedSetHue(hue: number | string, color: string): string;

  export default curriedSetHue;
}

declare module 'polished/color/setLightness' {
  function curriedSetLightnessWith1(color: string): string;
  function curriedSetLightness(
      lightness: number | string,
  ): typeof curriedSetLightnessWith1;
  function curriedSetLightness(
      lightness: number | string,
      color: string,
  ): string;

  export default curriedSetLightness;
}

declare module 'polished/color/setSaturation' {
  function curriedSetSaturationWith1(color: string): string;
  function curriedSetSaturation(
      saturation: number | string,
  ): typeof curriedSetSaturationWith1;
  function curriedSetSaturation(
      saturation: number | string,
      color: string,
  ): string;

  export default curriedSetSaturation;
}

declare module 'polished/color/shade' {
  function curriedShadeWith1(color: string): string;
  function curriedShade(
      percentage: number | string,
  ): typeof curriedShadeWith1;
  function curriedShade(
      percentage: number | string,
      color: string,
  ): string;

  export default curriedShade;
}

declare module 'polished/shorthands/size' {
  import { Styles } from 'polished/types/style';

  function size(height: string | number, width?: string | number): Styles;

  export default size;
}

declare module 'polished/helpers/stripUnit' {
  function stripUnit(value: string | number, unitReturn?: boolean): any;

  export default stripUnit;
}

declare module 'polished/shorthands/textInputs' {
  import { InteractionState } from 'polished/types/interactionState';

  function textInputs(...states: Array<InteractionState>): string;

  export default textInputs;
}

declare module 'polished/mixins/timingFunctions' {
  import { TimingFunction } from 'polished/types/timingFunction';

  function timingFunctions(timingFunction: TimingFunction): string;

  export default timingFunctions;
}

declare module 'polished/color/tint' {
  function curriedTintWith1(color: string): string;
  function curriedTint(
      percentage: number | string,
  ): typeof curriedTintWith1;
  function curriedTint(
      percentage: number | string,
      color: string,
  ): string;

  export default curriedTint;
}

declare module 'polished/color/toColorString' {
  function toColorString(color: Object): string;

  export default toColorString;
}

declare module 'polished/shorthands/transitions' {
  import { Styles } from 'polished/types/style';

  function transitions(
      ...properties: Array<string | Array<string>>
  ): Styles;

  export default transitions;
}

declare module 'polished/color/transparentize' {
  function curriedTransparentizeWith1(color: string): string;
  function curriedTransparentize(
      amount: number | string,
  ): typeof curriedTransparentizeWith1;
  function curriedTransparentize(
      amount: number | string,
      color: string,
  ): string;

  export default curriedTransparentize;
}

declare module 'polished/mixins/triangle' {
  import { TriangleConfiguration } from 'polished/types/triangleConfiguration';
  import { Styles } from 'polished/types/style';

  function triangle({
      pointingDirection,
      height,
      width,
      foregroundColor,
      backgroundColor,
  }: TriangleConfiguration): Styles;

  export default triangle;
}

declare module 'polished/mixins/wordWrap' {
  import { Styles } from 'polished/types/style';

  function wordWrap(wrap?: string): Styles;

  export default wordWrap;
}

declare module 'polished/types/style' {
  interface Styles {
      [ruleOrSelector: string]: string | number | Styles;
  }

  export { Styles };
}

declare module 'polished/types/sideKeyword' {
  type SideKeyword =
      | 'top'
      | 'topRight'
      | 'right'
      | 'bottomRight'
      | 'bottom'
      | 'bottomLeft'
      | 'left'
      | 'topLeft';

  export { SideKeyword };
}

declare module 'polished/types/interactionState' {
  type InteractionState = void | null | 'active' | 'focus' | 'hover';

  export { InteractionState };
}

declare module 'polished/types/fluidRangeConfiguration' {
  interface FluidRangeConfiguration {
      prop: string;
      fromSize: string;
      toSize: string;
  }

  export { FluidRangeConfiguration };
}

declare module 'polished/types/fontFaceConfiguration' {
  interface FontFaceConfiguration {
      fontFamily: string;
      fontFilePath?: string;
      fontStretch?: string;
      fontStyle?: string;
      fontVariant?: string;
      fontWeight?: string;
      fileFormats?: Array<string>;
      formatHint?: boolean;
      localFonts?: Array<string>;
      unicodeRange?: string;
      fontDisplay?: string;
      fontVariationSettings?: string;
      fontFeatureSettings?: string;
  }

  export { FontFaceConfiguration };
}

declare module 'polished/types/color' {
  interface HslColor {
      hue: number;
      saturation: number;
      lightness: number;
  }
  interface HslaColor {
      hue: number;
      saturation: number;
      lightness: number;
      alpha: number;
  }
  interface RgbColor {
      red: number;
      green: number;
      blue: number;
  }
  interface RgbaColor {
      red: number;
      green: number;
      blue: number;
      alpha: number;
  }

  export { HslColor };
  export { HslaColor };
  export { RgbColor };
  export { RgbaColor };
}

declare module 'polished/types/linearGradientConfiguration' {
  interface LinearGradientConfiguration {
      colorStops: Array<string>;
      toDirection?: string;
      fallback?: string;
  }

  export { LinearGradientConfiguration };
}

declare module 'polished/types/modularScaleRatio' {
  type ModularScaleRatio =
      | number
      | 'minorSecond'
      | 'majorSecond'
      | 'minorThird'
      | 'majorThird'
      | 'perfectFourth'
      | 'augFourth'
      | 'perfectFifth'
      | 'minorSixth'
      | 'goldenSection'
      | 'majorSixth'
      | 'minorSeventh'
      | 'majorSeventh'
      | 'octave'
      | 'majorTenth'
      | 'majorEleventh'
      | 'majorTwelfth'
      | 'doubleOctave';

  export { ModularScaleRatio };
}

declare module 'polished/types/radialGradientConfiguration' {
  interface RadialGradientConfiguration {
      colorStops: Array<string>;
      extent?: string;
      fallback?: string;
      position?: string;
      shape?: string;
  }

  export { RadialGradientConfiguration };
}

declare module 'polished/types/timingFunction' {
  type TimingFunction =
      | 'easeInBack'
      | 'easeInCirc'
      | 'easeInCubic'
      | 'easeInExpo'
      | 'easeInQuad'
      | 'easeInQuart'
      | 'easeInQuint'
      | 'easeInSine'
      | 'easeOutBack'
      | 'easeOutCubic'
      | 'easeOutCirc'
      | 'easeOutExpo'
      | 'easeOutQuad'
      | 'easeOutQuart'
      | 'easeOutQuint'
      | 'easeOutSine'
      | 'easeInOutBack'
      | 'easeInOutCirc'
      | 'easeInOutCubic'
      | 'easeInOutExpo'
      | 'easeInOutQuad'
      | 'easeInOutQuart'
      | 'easeInOutQuint'
      | 'easeInOutSine';

  export { TimingFunction };
}

declare module 'polished/types/triangleConfiguration' {
  import { SideKeyword } from 'polished/types/sideKeyword';

  interface TriangleConfiguration {
      backgroundColor?: string;
      foregroundColor: string;
      height: number | string;
      width: number | string;
      pointingDirection: SideKeyword;
  }

  export { TriangleConfiguration };
}
